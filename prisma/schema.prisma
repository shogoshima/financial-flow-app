generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid()) // Unique ID for the user
  name        String
  cpf         String       @unique // Brazilian Taxpayer ID
  avatar      String?
  createdAt   DateTime     @default(now()) // Date when user was created
  updatedAt   DateTime     @updatedAt // Date when user was last updated
  preferences Preferences? // One-to-one optional relation with Preferences
  goals       Goal[] // One-to-many relation with Goal
  budget      Budget? // One-to-one optional relation with Budget
  recovery    Recovery? // One-to-one optional relation with Recovery

  history History? // One-to-one optional relation with History
  auth    Auth? // One-to-one optional relation with Auth
}

model Preferences {
  id            String  @id @default(cuid()) // Unique ID for preferences
  theme         String? // Optional preference for theme, etc.
  notifications Boolean @default(false)
  language      String  @default("pt") // Default language for the user
  currency      String  @default("BRL") // Default currency for the user

  userId String @unique // Reference to the user this preference belongs to
  user   User   @relation(fields: [userId], references: [id]) // Link to user
}

model Goal {
  id            String   @id @default(cuid()) // Unique ID for the goal
  name          String // Name of the goal
  targetAmount  Float // Target amount for the goal
  currentAmount Float // Current amount saved for the goal
  deadline      DateTime // Deadline for the goal
  type          String // Type of goal (short, medium, long term)
  status        String // Status of the goal (pending, completed, failed)

  userId String // Reference to the user
  user   User   @relation(fields: [userId], references: [id]) // Link to user
}

model Auth {
  id            String    @id @default(cuid()) // Unique ID for authentication
  email         String    @unique // User email
  emailVerified Boolean   @default(false) // Email verification status
  passwordHash  String // Hashed password for the user
  jwtToken      String? // Session token (could be null if not logged in)
  lastLogin     DateTime? @default(now()) // Last login date
  loginAttempts Int       @default(0) // Number of failed login attempts

  userId String @unique // Reference to the user
  user   User   @relation(fields: [userId], references: [id]) // Link to user
}

model Recovery {
  id            String   @id @default(cuid()) // Unique ID for recovery
  recoveryToken String   @unique // Recovery token for the user
  expiresAt     DateTime // Expiration date for recovery token

  userId String @unique // The user this recovery data belongs to
  user   User   @relation(fields: [userId], references: [id]) // Link to user
}

model Transaction {
  id          String   @id @default(cuid()) // Unique ID for the transaction
  type        String // Type of transaction (income, expense)
  amount      Float // Amount of the transaction
  date        DateTime // Date of the transaction
  description String // Description of the transaction
  category    String // Category of the transaction

  historyId String? // Reference to history
  history   History? @relation(fields: [historyId], references: [id]) // Link to history
}

model Budget {
  id    String @id @default(cuid()) // Unique ID for the budget
  limit Float // Budget limit

  userId String @unique // Reference to the user
  user   User   @relation(fields: [userId], references: [id]) // Link to user
}

model History {
  id            String        @id @default(cuid()) // Unique ID for the history
  startDate     DateTime // Start date of the history
  endDate       DateTime // End date of the history
  totalIncome   Float         @default(0) // Total income recorded
  totalExpenses Float         @default(0) // Total expenses recorded
  netSavings    Float         @default(0) // Net savings calculated
  transactions  Transaction[] // One-to-many relation with Transaction

  userId String @unique
  user   User   @relation(fields: [userId], references: [id]) // One-to-one mandatory relation with History
}
